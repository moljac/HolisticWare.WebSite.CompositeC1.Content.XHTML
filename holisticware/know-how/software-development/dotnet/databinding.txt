Knockout	http://knockoutjs.com/		Knockout is an javascript library that lets u have declarative data binding and 	event binding in ur web user interface.		It also simulates with silverlight MVVM pattern	Two-Way Data Binding...			http://blog.paxcel.net/blog/knockout-js-explained-in-detail-with-examples/	http://channel9.msdn.com/Events/MIX/MIX11/FRM08			Knockout implementation with ASP.NET MVC 4 and Bootstrap :	Part 1 : http://www.codeproject.com/Articles/525532/Design-and-Develop-a-website-using-ASP-NET-MVC-4-E	Part 2 : http://www.codeproject.com/Articles/526970/Design-and-Develop-a-website-using-ASP-NET-MVC-4-E							Prism vs MVVMLight In your experience, which is better Framework Prism or MVVM Light to develop WPF Application? Prism is focused on developing very big applications in a modular/composable way (think Visual Studio) but you can also pick single features and use them. MVVM light is focused on being a lightweight framework that is usable across multiple XAML platforms. Prism is developed by a big company (Microsoft) by multiple people while MVVM light is the work of a single individual (Laurent Bugnion). MVVMLight(or any other similar framework), for developing a small application. Prism for application that are large, modular and follow header/footer/content kind of layout PRISM - great for larger modular apps where you want to compose an app from smaller pieces. The ability to define UI regions and inject views into them is very nice as well. The ability to lazy load portions of the app is helpful if the app is really large or if portions of the app are only accessible to people with certain roles/permissions. MVVM Lite is great for apps where you don't need the composition capability. My favorite parts of MVVMLite are the decoupled events, commands and base viewmodel. It depends. Larger apps, separate feature teams, custom module loading, Prism a no-brainer. Small apps, Prism can be overkill if you aren't careful. MvvmLite I've never cared for that much, the event to command binding is great but the vm locator stuff feels wrong. For Windows Phone, I would avoid most of them, too many allocations and can hurt performance but having a container is a must, MEF or Ninjet will In the past, I would have suggested MvvmLite, but on my most recent work I've been using ReactiveUI and so far very happy with the power of view model to view binding and routing view models to automatically 'change' views. Caliburn Micro has some nice features too as suggested by Felice. depend on you and your team experience on each framework, the target platforms, etc. I can mention some thoughts that I have based on my experience on each framework. PRISM - Most of the documentation explains how things could be done without settle down a concrete pattern. It's possible to find concrete examples, it's just that they're not easy to find. - It's supported by Microsoft Practices and Patterns (which involves a team a skilled people) - By default it encourage modular development. - By default modules may or may not use late binding - The supported methods for extensibility are Mef and Unity (I think it's not possible to use others frameworks) (I love Unity, but MEF is also very interesting) - Exporting modules or code to different platforms such as Windows Phone is not that easy because of the specific implementation for WPF MmvvLight - Implementations are easy to find in documentation. - I think only one person is supporting this project. - I haven't seen a modular pattern yet on this framework. - There is not IoC default, the SimpleIoC included it's really simple. On the other hand MvvmLight is IoC extensible, thus you can customize it or use other based on your needs. - (IMHO) The framework does not vary much between other platforms, thus exporting code to Windows Phone could be easier. 