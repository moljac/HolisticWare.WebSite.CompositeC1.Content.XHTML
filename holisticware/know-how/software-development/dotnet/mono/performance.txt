comparisons 
Poor Mono performance


Did you read that code?  All it does is a bunch of adds and multiplies.  If that were 
*seriously* representing your workload, you would use C or assembly.  The reason you 
code in .Net or mono is for the sake of high level classes and stuff that make 
development faster than coding C++.  As long as performance is good enough, you 
call it and end product.  If you need to tweak performance more, you need to dig 
lower level into C/C++/asm.

There are lots of times when, as a programmer, you have to accept some performance 
sub-optimization with .Net or mono, just because the pre-packaged class or whatever 
you're building on top of doesn't do *exactly* what you want it to do.  That's the 
price you pay for using a fully managed, high level, rapid development programming 
language and framework.  For example, if you want a Queue that guarantees uniqueness...  

The standard queue doesn't guarantee uniqueness and the standard Hashset doesn't 
guarantee order.  So you'd have to go find something else, or use a combination of 
Queue & Hashset, which is a sub-optimization caused by the fact that the data structure 
available to you isn't precisely what you want.

In any event - the comparison of performance between .Net and mono is a valid thing to 
care about, if you have a valid test.  Here's what you should focus on, if you care:

The .Net framework and mono class library is a *huge* set of stuff.  Microsoft has 
separate teams of developers for each category of stuff, and mono pulls in code from 
hundreds or thousands of independent sources.  Guess what that means?  Sometimes .Net 
will be faster, and sometimes mono will be faster.  It depends on the specific class and 
version and OS (and even cpu) that you're running on.  It depends specifically what you're 
doing.

I don't have specifics, but here's a hypothetical:  You might find that .Net 3.5 
System.Drawing.Drawing2D.Blend running on windows 7 with an Intel 64bit processor might 
perform half as well as with the AMD 64bit processor, and mono 2.4 in centos might be 3x 
slower, but when you switch to mono 2.10 in fedora, it might be 2x faster than the fastest 
.Net, and when you try .Net 4 or 4.5, they might have optimized it ...  You might find that 
one of these things has a slower startup and a faster runtime ...  Thus making it better for
certain types of Blend operations, while being worse for other datasets.

I know this one in particular:  General consensus on the Internet is that  
System.Security.Cryptography.AESManaged has a faster startup time and slower runtime than 
System.Security.AESCryptoServiceProvider.  Even though they both do the same thing, they're 
each optimized differently.  And guess what, from one version of .Net to another version...  
From one version of mono to another ...  AESManaged performance will vary.  And the performance 
depends on whether or not you have AES-NI instruction in your CPU (that produces approx 10x 
performance difference) and it depends on which version of .Net first included support for 
the AES-NI, and it depends which version of mono first included support for AES-NI.

If you want to do a performance comparison, you need to find a job that you actually 
care about, and hardware that you actually care about, and test on that.  You cannot 
make any generalization and expect it to have any validity, unless you *extremely* 
thoroughly benchmark all the different variables ... Change the CPU's, the OS's, 32bit 
and 64bit, with and without specialized hardware instruction sets, with and without 
certain Service Packs and KB patches applied ... Run on windows, mac, linux, ... 
Nobody does this much performance evaluation.  You cannot make a generalization.





Try doing greatest common divisor, mono tends to actually be faster than c!


The majority of the time in this benchmark is spent doing array bounds
checking. If you change it from a List<T> to a T[], the time taken to
execute the test is about half. This is true on both frameworks. These
kinds of micro benchmarks never give an accurate picture of real world
performance, unless your application actually only iterates List<T>
and sums numbers.

Mono also has different performance characteristics on Windows, Linux
and MacOS, even for testcases as simple as this.


Don't forget too, that process creation is very expensive on windows, .Net sort
of shortcuts this because it is deeply welded into windows.

Not really. A process is a process. That's why the .NET team invented AppDomains, 
to avoid the overhead involved in process creation...




ono can load llvm dynamically, and if it fails to do so it outputs to
stderr. I am 99% sure the packages for Windows are not built with LLVM
support. In that case I would hope you get some output to stderr when
running?



important to establish if this is a mono vs .net problem, or
a windows vs posix one.  The latter may be more heavily influenced by the
build.

All that aside, are you able to run your test program and get some profiler
data for us?


ou running Mono on Windows?

You should take in account that Windows as a platform is not a priority, 
because in this OS you can already run .NET through the Microsoft stack. 
So it may be possible that you're hitting a performance bottleneck that 
doesn't exist in Unix.



> s there anything I can do that would bring their relative
> performance difference closer to each other (e.g. below 20-25%)?

So you didn't find the well-hidden "--make-me-as-fast-as-ms"
switch, did you? 

You're comparing MS' 64-bit runtime with a 32-bit Mono w/out LLVM
support and with a pretty slow GC (under Windows).

Since Windows isn't Mono's prime-time OS, you may want to try
under 64-bit Linux (where you can have LLVM and alternative GCs),
identify bottlenecks and file bugs with appropriate test cases.










> SpeedTest.cs
> <http://mono.1490590.n4.nabble.com/file/n4658877/SpeedTest.cs>

Ok, you've provided some source code, you said it is important to you, and 
it represents your real life work load.  You've said you had some performance 
problems with it and would like to know why and what to do about it ...  
Other people here have commented that it seems we're avoiding the problem.

So, I'll bite:

I downloaded the file you linked above, and compiled it, .Net 4 Windows 7 
x86_64 dual core intel i5.  It ran in 3.3 sec.  I then ran on the exact same 
machine in windows mono 2.10.9 and it ran in 3.66 sec.  To eliminate sampling 
error, I ran repeatedly, and alternatingly.  Windows 3.4, Mono 3.41, Win 3.3, 
Mono 3.41, Win 3.3, Mono 3.43

While the mono performance is a little lower, it's not dramatic.

I then set var totals = new List<int>() { 10, 10, 100, 100, 1000 };
to make the job run longer, and ran again.  Win 32.7, Mono 32.8, Win 32.4, Mono 32.9

Even less dramatic.

I set the totals list back to the original presets.  Deployed the .exe to a 
slightly slower windows 7 x86_64 virtual machine with 2 cpu's and 1 g ram, 
and also deployed (and recompiled) to a fedora 17 x86_64 machine, mono 2.10.8 
installed via yum.  The win & lin machines have identical system specs, running 
on the same host hardware.  win 4.9, lin 3.2, win 4.9, lin 3.2, win 4.9, lin 3.2

The most dramatic result we're seeing in any of these tests, is that mono for 
linux is significantly faster than .Net for this particular task, while mono for 
windows is slightly slower than .Net.  Again, specifically for this test case in 
this configuration.  I would not be comfortable generalizing anything from this. 
I bet you'll see different results with different patch levels of Windows or linux, 
different versions of .Net, different versions of mono, different on 32bit vs 
64bit hardware, etc.












Imre  -  you missed the point of my email, and obviously I could have made
the program a lot faster than I did.  The point is that your program is
generally slow for other reasons, though you seemed to be worried about
using Arrays or Lists which is peanuts compared to other things you could
do.  In particular, in both Mono and .NET, method calls are expensive.  In
my experience, adding numbers and incrementing values takes no time compared
to calling the method that does these things.  I was suggesting you should
do the following things:

 

1 - Make sure the method is inlined, avoid the method call.

 

2 - Do not insert the for loop inside a useless do while loop.  You are
checking conditions inside and outside the method and likely preventing
important optimizations like caching the list.count property.  I don't know
what you are trying to do, but note that if you replace the do/while code
with the code below, than you inline the Advance method, can still do
everything inside the loop and it is over an order of magnitude faster on
either .NET or Mono.  Not sure if you can do this with your code, but the
point is mono v. .NET performance differences pale in comparison to the
nested for-loop-method-call-inside-do-while-loop performance penalty you are
paying right now. 

 

       for (int index = counters.Count - 1; index >= 0; --index)

               {

                    ++counter;

                    if (counters[index] == (totals[index] - 1))

                    {

                        counters[index] = 0;

                        continue;

                    }

                    else

                    {

                        ++counters[index];

                    }

 

                    //All kinds of other stuff can be done here....

                }

				
				
				
 important things to keep in mind:

-The Windows port of mono lags in terms of performance compared to OSX and
linux;
-The new, and significantly faster, garbage collector is not fully
supported on windows, and absent on 2.10;
-The new 3.0 series is significantly faster;








>From this massive thread about Mono vs .Net performance, there is one thing clearly 
resulting:  There's a lot of complexity, and a lot of variability, but certain things 
remain constant.  Like, for example, the comment about method calls generally costing
more than the code inside them.  This statement, I expect, will be true regardless of 
.Net vs Mono, and which version of each, and which platform they are running on.

So, are there any good guides or blogs or other resources out there, that concisely 
focus on understanding performance characteristics and writing fast code				







































using System;
using System.Collections.Generic;

namespace SpeedTest
{
    class SpeedTest
    {
        static void Main(string[] args)
        {
            var totals = new List<int>() { 10, 10, 100, 100, 100 };
            var counters = new List<int>() { 0, 0, 0, 0, 0 }; ;
            int counter = 0;

            var startTime = DateTime.Now;

            Console.WriteLine("START TIME: {0}", startTime.ToString());

            int total = 1;

            foreach (var value in totals)
            {
                total *= value;
            }

            Console.WriteLine("Total = {0}", total);

            do
            {
                ++counter;
            }
            while (!Advance(counters, totals));

            var endTime = DateTime.Now;

            Console.WriteLine();
            Console.WriteLine("Counter = {0}", counter);
            Console.WriteLine("END TIME: {0}", endTime.ToString());
            Console.WriteLine("RUN TIME: {0}", (endTime - startTime).ToString());
        }

        static bool Advance(List<int> current, List<int> total)
        {
            bool wrappedAround = false;

            for (int index = current.Count - 1; index >= 0; --index)
            {
                if (current[index] == (total[index] - 1))
                {
                    current[index] = 0;
                    wrappedAround = true;
                }
                else
                {
                    ++current[index];
                    wrappedAround = false;
                    break;
                }
            }

            return (wrappedAround);
       
        }
    }
}






	http://stackoverflow.com/questions/2397700/mono-project-why-is-mono-faster-than-net
	http://stackoverflow.com/questions/2473666/tips-for-optimizing-c-net-programs
	http://stackoverflow.com/questions/969183/what-is-optimize-c-sharp-compiler-key-intended-for
	http://stackoverflow.com/questions/5204667/c-sharp-compiler-optimization-unused-methods
	
	
	http://tirania.org/blog/archive/2011/Dec-21.html
	http://www.youtube.com/watch?v=g3aBfkFbPWk
	
	http://flyingfrogblog.blogspot.com/2009/01/mono-22.html
	http://flyingfrogblog.blogspot.com/2010/07/mono-24-still-leaking-like-sieve.html


	
	
	http://florent.clairambault.fr/stupid-cpp-vs-charp-performance-comparison
	