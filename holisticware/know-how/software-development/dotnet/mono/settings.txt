settings


> What is the recommended way to save user settings files from Mono across
> different platforms?
>
> For example I have an XML file with settings that I want to store somewhere.
> I thought the IsolatedFileStorage would be a good place but I have
> permission problems (read and write) on both Mac OSX and Linux.

I think you'll find your best answer here:
http://clevertrove.com/SpecialFolderEnumeration/specialFolder_by_os.html

Looks like either ApplicationData or CommonApplicationData or LocalApplicationData or Personal

BTW, I noticed, IsolatedFileStorage isn't on the list.  I'm guessing you meant IsolatedStorageFile.  
It looks like IsolatedStorageFile does something similar, including a level of security, but I don't 
know how much security it provides.  I am guessing, if you actually want security, 
there's probably something better under System.Security.  But I really am just guessing.

I personally have a preference for JSON (javascriptserializer) over XML, but they both accomplish 
the same task of serialization.


In windows you will have problems if the application is executed by a user
and the file is trying to save to a directory without permissions. Take
care with the user that is executing MonoDevelop or the app that should
save the file.



o your settings 'need' to be in an XML file? you can store things in the .net
registry with very little fuss for cross-platform work.



What's wrong with the built-in Application Settings features in the .NET
Framework? I've never tested this with Mono, but it's been there since .NET
Framework 2.0 so I assume it would work fine. The .NET Framework handles
loading and saving the settings into an XML file, and gives strongly-typed
access to all the properties.
See http://msdn.microsoft.com/en-us/library/k4s6c3a0(v=vs.100).aspx

The built-in app.config features work fine cross-platform.  Even custom 
configuration sections and all of that.  Our system uses them 
extensively for system composition (ie: defining which components should 
be started at runtime) on both .NET and Mono.  But that type of setting 
setup is per-application; it doesn't make an ideal per-user 
configuration system unless you create your own construct within it. 
Totally feasible, but probably not what the OP was getting at.

The App.config is per-application, but .NET also has built-in functionality
to support per-user settings. These are stored in XML files in the user's
AppData folder (C:\Users\[Username][AppData\Local\[Company Name] on
Windows). See
http://stackoverflow.com/questions/1075204/when-using-a-settings-settings-file-in-net-where-is-the-config-actually-stored

You create these similarly to how you create application-level settings (in
Visual Studio: Right-click project ? Properties ? Settings tab ? Add a new
setting and set scope to User).


I didn't think of the application settings, thanks for mentioning them. 
I rarely use them because they are rather flat for my liking and .NET 
classes are serialized into XML quite trivially. ? However I tested 
using the Application Settings on Ubuntu 12 and a normal user can indeed 
save changes to the user settings. ? I couldn't find where the file was 
saved on the Linux system btw which means that it will not be obvious 
for users i.e. they will not be able to edit the settings file manually. 
I will provide a way for them to edit the settings from the app so I 
guess I can live with the actuall physical file that contains the 
settings being hidden. ? So what I am thinking now is that I may?just 
save my settings class serialized as xml and saved as a single user 
setting value. I think this will solve my problem! ? 





With application settings you can store any class that's serializable. The
framework handles serializing and deserializing for you. . You just need
to tell it which type each setting is - not sure where this is in
MonoDevelop (or if it even has the tooling for it) but in Visual Studio
it's in the project properties on the "Settings" tab.

On Linux the settings file should be in the user's home directory - see if
it's in a hidden directory called ".settings"
